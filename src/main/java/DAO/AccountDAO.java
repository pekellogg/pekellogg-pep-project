package DAO;

import Model.Account;
import Util.ConnectionUtil;
import java.sql.*;
// import java.util.ArrayList;
// import java.util.List;

/**
 * A DAO is a class that mediates the transformation of data between the format of objects in Java to rows in a database
 * Assume that the database has already created a table named 'account'.
 * It contains similar values as the Account class:
 * account_id (type: int)
 * username (type: varchar(255))
 * password (type: varchar(255))
 */

public class AccountDAO {
    /**
     * TO DO: Authenticate a user account using provided username and password.
     *
     * @param username an account's username
     * @param password an account's password
     */
    public Account authenticateAccount(Account account) {
        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "SELECT * FROM account WHERE username = ? AND password = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setString(1, account.getUsername());
            preparedStatement.setString(2, account.getPassword());
            ResultSet rs = preparedStatement.executeQuery();
            while (rs.next()) {
                return new Account(
                    rs.getInt("account_id"),
                    rs.getString("username"),
                    rs.getString("password")
                );
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * TO DO: Add an account record into the database which matches the values contained in the account object.
     * You can use the getters already written in the Account class to retrieve its values (getDeparture_city(),
     * getArrival_city()). The account_id will be automatically generated by the SQL database, and JDBC will be able
     * to retrieve the generated ID automatically. That means that you when you insert the account, you only need
     * to define the departure_city and arrival_city values (two columns total!)
     * Remember that the format of a insert PreparedStatement written as a string works something like this:
     * String sql = "insert into TableName (ColumnName1, ColumnName2) values (?, ?);";
     * The question marks will be filled in by the preparedStatement setString, setInt, etc methods. they follow
     * this format, where the first argument identifies the question mark to be filled (left to right, starting
     * from zero) and the second argument identifies the value to be used:
     * preparedStatement.setString(1,string1);
     * preparedStatement.setString(2,string2);
     *
     * @param account an object modeling an Account. The account object does not contain an account ID.
     */
    public Account insertAccount(Account account) {
        Connection connection = ConnectionUtil.getConnection();
        if (account.getUsername().length() != 0 && account.getPassword().length() >= 4) {
            try {
                String sql = "INSERT INTO account (username, password) values (?, ?)";
                PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
                preparedStatement.setString(1, account.getUsername());
                preparedStatement.setString(2, account.getPassword());
                preparedStatement.executeUpdate();
                ResultSet pkeyResultSet = preparedStatement.getGeneratedKeys();
                if (pkeyResultSet.next()) {
                    int generated_account_id = (int) pkeyResultSet.getLong(1);
                    return new Account(generated_account_id, account.getUsername(), account.getPassword());
                }
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        }
        return null;
    }

    /**
     * TO DO: Retrieve a specific account using its account ID.
     * Remember that the format of a select where statement written as a Java String looks something like this:
     * String sql = "select * from TableName where ColumnName = ?";
     * The question marks will be filled in by the preparedStatement setString, setInt, etc methods. they follow
     * this format, where the first argument identifies the question mark to be filled (left to right, starting
     * from zero) and the second argument identifies the value to be used:
     * preparedStatement.setInt(1,int1);
     *
     * @param id an account ID.
     */
    public Account getAccountById(int id) {
        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "SELECT * FROM account WHERE account_id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1, id);
            ResultSet rs = preparedStatement.executeQuery();
            while (rs.next()) {
                Account account = new Account(
                    rs.getInt("account_id"),
                    rs.getString("username"),
                    rs.getString("password")
                );
                return account;
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * TO DO: Update the account identified by the account id to the values contained in the account object.
     * Remember that the format of an update PreparedStatement written as a Java String looks something like this:
     * String sql = "update TableName set ColumnName1=?, ColumnName2=? where ColumnName3 = ?;";
     * The question marks will be filled in by the preparedStatement setString, setInt, etc methods. they follow
     * this format, where the first argument identifies the question mark to be filled (left to right, starting
     * from zero) and the second argument identifies the value to be used:
     * preparedStatement.setString(1,string1);
     * preparedStatement.setString(2,string2);
     * preparedStatement.setInt(3,int1);
     *
     * @param id an account ID.
     * @param account an account object. The account object does not contain an account ID.
     */
    public void updateAccount(int id, Account account) {
        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "UPDATE account SET username = ?, password = ? WHERE account_id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, account.getUsername());
            preparedStatement.setString(2, account.getPassword());
            preparedStatement.setInt(3, id);
            preparedStatement.executeUpdate();
        } catch(SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * TO DO: Retrieve all accounts from the account table
     * @return all accounts.
     */
    // public List<Account> getAllAccounts() {
    //     Connection connection = ConnectionUtil.getConnection();
    //     List<Account> accounts = new ArrayList<>();
    //     try {
    //         String sql = "SELECT * FROM account";
    //         PreparedStatement preparedStatement = connection.prepareStatement(sql);
    //         ResultSet rs = preparedStatement.executeQuery();
    //         while (rs.next()) {
    //             Account account = new Account(
    //                 rs.getInt("account_id"),
    //                 rs.getString("username"),
    //                 rs.getString("password")
    //             );
    //             accounts.add(account);
    //         }
    //     } catch (SQLException e) {
    //         System.out.println(e.getMessage());
    //     }
    //     return accounts;
    // }
}
